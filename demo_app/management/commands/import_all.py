from django.core.management.base import BaseCommand
from django.core.management import call_command

class Command(BaseCommand):
    help = 'Import t·∫•t c·∫£ d·ªØ li·ªáu: k·ªá s√°ch, lo·∫°i s√°ch, v√† s√°ch m·∫´u'

    def add_arguments(self, parser):
        parser.add_argument(
            '--books',
            type=int,
            default=100,
            help='S·ªë l∆∞·ª£ng s√°ch mu·ªën t·∫°o (m·∫∑c ƒë·ªãnh: 100)'
        )
        parser.add_argument(
            '--reset',
            action='store_true',
            help='X√≥a to√†n b·ªô d·ªØ li·ªáu c≈© tr∆∞·ªõc khi import'
        )

    def handle(self, *args, **options):
        book_count = options['books']
        reset = options['reset']
        
        self.stdout.write(self.style.SUCCESS('='*70))
        self.stdout.write(self.style.SUCCESS('  IMPORT TO√ÄN B·ªò D·ªÆ LI·ªÜU TH∆Ø VI·ªÜN'))
        self.stdout.write(self.style.SUCCESS('='*70))
        
        # Reset d·ªØ li·ªáu n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
        if reset:
            self.stdout.write(self.style.WARNING('\n‚ö†Ô∏è  C·∫¢NH B√ÅO: ƒêang x√≥a to√†n b·ªô d·ªØ li·ªáu c≈©...'))
            from demo_app.models import Book, Book_Type, Compartment, Book_Shelf
            
            Book.objects.all().delete()
            self.stdout.write(self.style.WARNING('  ‚Üí ƒê√£ x√≥a t·∫•t c·∫£ s√°ch'))
            
            Book_Type.objects.all().delete()
            self.stdout.write(self.style.WARNING('  ‚Üí ƒê√£ x√≥a t·∫•t c·∫£ lo·∫°i s√°ch'))
            
            Compartment.objects.all().delete()
            self.stdout.write(self.style.WARNING('  ‚Üí ƒê√£ x√≥a t·∫•t c·∫£ √¥'))
            
            Book_Shelf.objects.all().delete()
            self.stdout.write(self.style.WARNING('  ‚Üí ƒê√£ x√≥a t·∫•t c·∫£ k·ªá'))
            
            self.stdout.write(self.style.SUCCESS('‚úì ƒê√£ reset database\n'))
        
        # B∆∞·ªõc 1: Import k·ªá s√°ch
        self.stdout.write(self.style.SUCCESS('\nüìö B∆Ø·ªöC 1: Import k·ªá s√°ch v√† c√°c √¥...'))
        self.stdout.write(self.style.SUCCESS('-'*70))
        call_command('import_shelves')
        
        # B∆∞·ªõc 2: Import lo·∫°i s√°ch
        self.stdout.write(self.style.SUCCESS('\nüìñ B∆Ø·ªöC 2: Import lo·∫°i s√°ch...'))
        self.stdout.write(self.style.SUCCESS('-'*70))
        call_command('import_book_types')
        
        # B∆∞·ªõc 3: Import s√°ch m·∫´u
        self.stdout.write(self.style.SUCCESS(f'\nüìï B∆Ø·ªöC 3: Import {book_count} s√°ch m·∫´u...'))
        self.stdout.write(self.style.SUCCESS('-'*70))
        call_command('import_books', count=book_count)
        
        # T·ªïng k·∫øt
        from demo_app.models import Book, Book_Type, Compartment, Book_Shelf
        
        self.stdout.write(self.style.SUCCESS('\n'+'='*70))
        self.stdout.write(self.style.SUCCESS('  T·ªîNG K·∫æT'))
        self.stdout.write(self.style.SUCCESS('='*70))
        self.stdout.write(self.style.SUCCESS(f'  üìö T·ªïng s·ªë k·ªá s√°ch: {Book_Shelf.objects.count()}'))
        self.stdout.write(self.style.SUCCESS(f'  üì¶ T·ªïng s·ªë √¥: {Compartment.objects.count()}'))
        self.stdout.write(self.style.SUCCESS(f'  üìñ T·ªïng s·ªë lo·∫°i s√°ch: {Book_Type.objects.count()}'))
        self.stdout.write(self.style.SUCCESS(f'  üìï T·ªïng s·ªë s√°ch: {Book.objects.count()}'))
        
        # Th·ªëng k√™ chi ti·∫øt
        self.stdout.write(self.style.SUCCESS(f'\n  TH·ªêNG K√ä CHI TI·∫æT:'))
        
        # Top 5 k·ªá c√≥ nhi·ªÅu s√°ch nh·∫•t
        self.stdout.write(self.style.SUCCESS(f'\n  Top 5 k·ªá c√≥ nhi·ªÅu s√°ch:'))
        shelves_with_books = Book_Shelf.objects.all()
        shelf_stats = [(shelf, shelf.books.count()) for shelf in shelves_with_books]
        shelf_stats.sort(key=lambda x: x[1], reverse=True)
        
        for i, (shelf, count) in enumerate(shelf_stats[:5], 1):
            self.stdout.write(self.style.SUCCESS(f'    {i}. {shelf.name} ({shelf.description}): {count} quy·ªÉn'))
        
        # Top 5 lo·∫°i s√°ch ph·ªï bi·∫øn
        self.stdout.write(self.style.SUCCESS(f'\n  Top 5 lo·∫°i s√°ch ph·ªï bi·∫øn:'))
        book_types_with_books = Book_Type.objects.all()
        type_stats = [(bt, bt.books.count()) for bt in book_types_with_books]
        type_stats.sort(key=lambda x: x[1], reverse=True)
        
        for i, (book_type, count) in enumerate(type_stats[:5], 1):
            self.stdout.write(self.style.SUCCESS(f'    {i}. {book_type.name}: {count} quy·ªÉn'))
        
        self.stdout.write(self.style.SUCCESS('\n'+'='*70))
        self.stdout.write(self.style.SUCCESS('  ‚úì HO√ÄN TH√ÄNH! D·ªØ li·ªáu ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng'))
        self.stdout.write(self.style.SUCCESS('='*70 + '\n'))
        
        # H∆∞·ªõng d·∫´n ti·∫øp theo
        self.stdout.write(self.style.SUCCESS('B·∫°n c√≥ th·ªÉ:'))
        self.stdout.write(self.style.SUCCESS('  1. Xem d·ªØ li·ªáu: python manage.py shell'))
        self.stdout.write(self.style.SUCCESS('  2. Ch·∫°y server: python manage.py runserver'))
        self.stdout.write(self.style.SUCCESS('  3. V√†o admin: python manage.py createsuperuser (n·∫øu ch∆∞a c√≥)'))
        self.stdout.write(self.style.SUCCESS(''))
